// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x", "debian-openssl-1.1.x"]
}

model AppSettings {
  id    Int    @id @default(1)
  appId String @default(uuid())

  allowNewUsers        Boolean  @default(true)
  registerEmailFilters String[] @default([])

  createdAt DateTime @default(now())
}

model User {
  id            String         @id @default(cuid())
  superadmin    Boolean        @default(false)
  type          String         @default("user")
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime       @default(now())
  accounts      Account[]
  sessions      Session[]
  projects      ProjectUsers[]
  links         Link[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?    // For GitHub authentication
  access_token             String? @db.Text
  oauth_token              String? @db.Text // For Twitter authentication
  oauth_token_secret       String? @db.Text // For Twitter authentication
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id        String          @id @default(cuid())
  name      String
  slug      String          @unique
  domain    String          @unique
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  users     ProjectUsers[]
  invites   ProjectInvite[]
  links     Link[]
}

model ProjectUsers {
  id        String   @id @default(cuid())
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@unique([userId, projectId])
}
model ProjectInvite {
  email       String
  expires     DateTime
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  createdAt   DateTime @default(now())
  @@unique([email, projectId])
}

model Link {
  id              String    @id @default(cuid())
  domain          String    // domain of the link (e.g. dub.sh) – also stored on Redis
  key             String    // key of the link (e.g. /github) – also stored on Redis
  url             String    // target url (e.g. https://github.com/steven-tey/dub) – also stored on Redis
  archived        Boolean   @default(false) // whether the link is archived or not
  expiresAt       DateTime? // when the link expires – stored on Redis via ttl
  password        String?   // password to access the link – also stored on Redis

  // Custom OG tags – if not set, will use OG tags from target url
  title           String?  // OG title for the link (e.g. Dub - Open-Source Bitly Alternative)
  description     String?  // OG description for the link (e.g. An open-source link shortener SaaS with built-in analytics and free custom domains.)
  image           String?  // OG image for the link (e.g. https://dub.sh/og-image.png)

  // UTM parameters
  utm_source      String?   // UTM source for the link (e.g. youtube.com)
  utm_medium      String?   // UTM medium for the link (e.g. social)
  utm_campaign    String?   // UTM campaign for the link (e.g. summer-sale)
  utm_term        String?   // UTM term for the link (e.g. dub)
  utm_content     String?   // UTM content for the link (e.g. description)
  
  clicks          Int      @default(0) // number of clicks (updated every day via cron + real-time when user views links)
  clicksUpdatedAt DateTime @default(now()) // last time clicks was updated

  // User who created the link
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String?

  // Project that the link belongs to
  project         Project? @relation(fields: [domain], references: [domain], onUpdate: Cascade, onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([domain, key])

  // indices for links per domain/project
  @@index([domain, archived, expiresAt, createdAt(sort: Desc)])
  @@index([domain, archived, expiresAt, clicks(sort: Desc)])

  // indices for links per domain/project specific to a user
  @@index([domain, archived, expiresAt, userId, createdAt(sort: Desc)])
  @@index([domain, archived, expiresAt, userId, clicks(sort: Desc)])

  // TODO: might wanna add indices for utm_source, utm_medium, utm_campaign
}
